# -*- coding: utf-8 -*-
"""gdse60-MLWS-workbook-day-02

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1db6hYfQqrPuQENHFdeymk00Ktr36cjiZ

# * method / funtion

   * args
   * kwargs

   * inner funtion

   *@ annotaion
   * exeption
"""

def print_value():
  print("values print ")

print_value()

def print_value(a,b):
  print("values print ")

print_value()

def print_value(a,b):
  print("values print ",a," ",b)

print_value(10,20)

def print_value(a=10,b=30):
  print("values print ",a," ",b)

print_value()

def print_value(a=10,b=30):
  print("values print ",a," ",b)

print_value(100,200)

def print_value(a=10,b):
  print("values print ",a," ",b)

print_value()

def print_value(a,b=20):
  print("values print ",a," ",b)

print_value()

def print_value(a=10,b):
  print("values print ",a," ",b)

print_value(50)

def print_value(a,b=90):
  print("values print ",a," ",b)

print_value(50)

def sum_value(a,b):
  return a+b

sum_value(5,10)

def cal_rectangle(a,b):
  return a*b

def cal_triangle(a,b):
  return a*b/10

def area_calculator(a,b,calculator):
  area=calculator(a,b)
  print("Area : ",area," using : ",calculator)

area_calculator(10,20,cal_rectangle)
area_calculator(10,20,cal_triangle)

def funn_a(*args):
  print(args)

funn_a(2,4,6,85,"256")

def funn_b(**kwargs):
  print(kwargs)

funn_a(2,4,6,85,"256")

def funn_b(**kwargs):
  print(kwargs)

funn_b(name="piyumal",age="25")

def funn_c(*args):
  print(args)

funn_c(name="piyumal",age="25")

def funn_d(*args,**kwargs):
  print(args)
  print(kwargs)

funn_d(5,25,485,"5",name="piyumal",age="25")

def funn_e(a,b,c,d):
  print("a : ",a)
  print("b : ",b)
  print("c : ",c)
  print("d : ",d)

funn_e(2,4,6,3)

def funn_e(a=0,b=0,c=0,d=0):
  print("a : ",a)
  print("b : ",b)
  print("c : ",c)
  print("d : ",d)

funn_e(d=10)

funn_e(3,40,d=10)

def funn_f(a=0,b=0,c=0,d=0,*args,**kwargs):
  print("a : ",a)
  print("b : ",b)
  print("c : ",c)
  print("d : ",d)
  print("args : ",args)
  print("kwargs : ",kwargs)

funn_f(d=10)

funn_f(10,2,3,4,3,2,name="kamal")

funn_f(d=10,ab=2,name="kamal")

"""-----
## inner funtion
-----
"""

def A():
  print("a")

  def B():
    print("b")

A()

#don't this access
A().B()

#access karanna puluvan palaveni vidiha
def A():
  print("a")

  def B():
    print("b")

  B()

A()

#access karanna puluvan deveni vidiha
def A():
  print("a")

  def B():
    print("b")

  return B

A()

#Wront option
A().B()

A()()

def A():
  print("a")

  def B():
    print("b")

    def C():
      print("c")

    return C

  return B

A()

A()()

A()()()

def A(x,y):

  def B():
    return x+y

  return B

A(10,20)()

import datetime

def hellow_1():
  print(datetime.datetime.now(), end=" : ")
  print("hellow_1")

def hellow_2():
  print(datetime.datetime.now(), end=" : ")
  print("hellow_2")


hellow_1()
hellow_2()

import datetime

def log(func):

  def wrapper():
    print(datetime.datetime.now(), end=" : ")
    func()

  return wrapper

def hellow_1():
  print("hellow_1")

def hellow_2():
  print("hellow_2")


log(hellow_1)()
log(hellow_2)()

x1=log(hellow_1)
x1()

"""  # @ annotaion"""

import datetime

def log(func):

  def wrapper():
    print(datetime.datetime.now(), end=" : ")
    func()

  return wrapper

@log
def hellow_1():
  print("hellow_1")

@log
def hellow_2():
  print("hellow_2")



hellow_1()
hellow_2()

"""@log ==>  

      m1=log(hellow_1)
      m1()

----
# exeption
----
"""

#ZeroDivisionError exeption
a=10/0

try:
  a=10/0
except:
  print("Invalied Oparation..!")

try:
  a=10/0
except Exception as e:
  print("Invalied Oparation..!",e)

def test(a,b):
  return a/b

test(10,0)

def test(a,b):
  try:
    return a/b
  except Exception as e:
    return "Invalied Oparation..!",e

test(10,0)

def Exeption_handle(func):

  def wrapper(a,b):
    try:
      return func(a,b)
    except Exception as e:
      return "Invalied Oparation..!",e

  return wrapper

@Exeption_handle
def test(a,b):
  return a/b

test(10,0)

@Exeption_handle
def test(a,b,c):
  return (a/b)/c

#argument ganana vadi
test(10,2,3)

def Exeption_handle(func):

  def wrapper(*args,**kwargs):
    try:
      return func(*args,**kwargs)
    except Exception as e:
      return "Invalied Oparation..!",e

  return wrapper

@Exeption_handle
def test(a,b,c):
  return (a/b)/c

print(test(10,0,0))
print(test(10,2,5))

